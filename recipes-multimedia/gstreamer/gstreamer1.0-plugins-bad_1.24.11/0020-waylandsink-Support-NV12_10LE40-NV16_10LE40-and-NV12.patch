From 1a16561351a13119dffb667ebe5c6e035eba8649 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 12 Nov 2021 11:14:37 +0800
Subject: [PATCH 20/42] waylandsink: Support NV12_10LE40 NV16_10LE40 and
 NV12|NV12_10LE40|NV16 (AFBC)

Tested on RK356x with:
export GST_MPP_VIDEODEC_DEFAULT_ARM_AFBC=1
gst-play-1.0 video.mp4 --videosink=waylandsink

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 ext/gtk/gstgtkwaylandsink.c                 |   5 +-
 ext/wayland/gstwaylandsink.c                | 103 +++++++++++++++++++-
 gst-libs/gst/wayland/gstwldisplay.c         |   7 +-
 gst-libs/gst/wayland/gstwldisplay.h         |   2 +-
 gst-libs/gst/wayland/gstwllinuxdmabuf.c     |  46 +++++++--
 gst-libs/gst/wayland/gstwlvideobufferpool.c |   3 +-
 gst-libs/gst/wayland/gstwlvideoformat.c     |   6 +-
 gst-libs/gst/wayland/gstwlvideoformat.h     |   2 +
 gst-libs/gst/wayland/gstwlwindow.c          |  46 ++++++++-
 gst-libs/gst/wayland/gstwlwindow.h          |   4 +
 10 files changed, 203 insertions(+), 21 deletions(-)

diff --git a/ext/gtk/gstgtkwaylandsink.c b/ext/gtk/gstgtkwaylandsink.c
index 816913d..7b796cf 100644
--- a/ext/gtk/gstgtkwaylandsink.c
+++ b/ext/gtk/gstgtkwaylandsink.c
@@ -971,7 +971,7 @@ gst_gtk_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   /* validate the format base on the memory type. */
   if (use_dmabuf) {
     if (!gst_wl_display_check_format_for_dmabuf (priv->display,
-            &priv->drm_info))
+            priv->drm_info.drm_fourcc, priv->drm_info.drm_modifier))
       goto unsupported_drm_format;
   } else if (!gst_wl_display_check_format_for_shm (priv->display,
           &priv->video_info)) {
@@ -1132,7 +1132,8 @@ gst_gtk_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
       "buffer %" GST_PTR_FORMAT " does not have a wl_buffer from our "
       "display, creating it", buffer);
 
-  if (gst_wl_display_check_format_for_dmabuf (priv->display, &priv->drm_info)) {
+  if (gst_wl_display_check_format_for_dmabuf (priv->display,
+      priv->drm_info.drm_fourcc, priv->drm_info.drm_modifier)) {
     guint i, nb_dmabuf = 0;
 
     for (i = 0; i < gst_buffer_n_memory (buffer); i++)
diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 77e9357..db0a415 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -42,9 +42,10 @@
 #include <config.h>
 #endif
 
+#include <drm_fourcc.h>
+
 #include "gstwaylandsink.h"
 
-#include <drm_fourcc.h>
 #include <gst/allocators/allocators.h>
 #include <gst/video/videooverlay.h>
 
@@ -684,6 +685,64 @@ gst_wayland_sink_event (GstBaseSink * bsink, GstEvent * event)
   return ret;
 }
 
+static GstCaps *
+gst_wayland_sink_fixup_caps (GstWaylandSink * self, GstCaps * caps)
+{
+  GstCaps *tmp_caps = NULL;
+
+  if (gst_wl_display_check_format_for_dmabuf (self->display,
+          DRM_FORMAT_NV15, DRM_FORMAT_MOD_LINEAR)) {
+    tmp_caps = gst_caps_from_string (
+        GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_DMABUF,
+            "NV12_10LE40"));
+
+    if (gst_wl_display_check_format_for_dmabuf (self->display,
+            DRM_FORMAT_NV15, DRM_AFBC_MODIFIER)) {
+      gst_caps_ref (tmp_caps);
+      gst_caps_append (caps, tmp_caps);
+
+      gst_caps_set_simple (tmp_caps, "arm-afbc", G_TYPE_INT, 1, NULL);
+    }
+
+    gst_caps_append (caps, tmp_caps);
+  }
+
+  if (gst_wl_display_check_format_for_dmabuf (self->display,
+          DRM_FORMAT_NV20, DRM_FORMAT_MOD_LINEAR)) {
+    tmp_caps = gst_caps_from_string (GST_VIDEO_CAPS_MAKE ("NV16_10LE40"));
+
+    if (gst_wl_display_check_format_for_dmabuf (self->display,
+            DRM_FORMAT_NV20, DRM_AFBC_MODIFIER)) {
+      gst_caps_ref (tmp_caps);
+      gst_caps_append (caps, tmp_caps);
+
+      gst_caps_set_simple (tmp_caps, "arm-afbc", G_TYPE_INT, 1, NULL);
+    }
+
+    gst_caps_append (caps, tmp_caps);
+  }
+
+  if (gst_wl_display_check_format_for_dmabuf (self->display,
+          DRM_FORMAT_NV12, DRM_AFBC_MODIFIER)) {
+    tmp_caps = gst_caps_from_string (
+        GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_DMABUF,
+            "NV12"));
+    gst_caps_set_simple (tmp_caps, "arm-afbc", G_TYPE_INT, 1, NULL);
+    gst_caps_append (caps, tmp_caps);
+  }
+
+  if (gst_wl_display_check_format_for_dmabuf (self->display,
+        DRM_FORMAT_NV16, DRM_AFBC_MODIFIER)) {
+    tmp_caps = gst_caps_from_string (
+        GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_DMABUF,
+            "NV16"));
+    gst_caps_set_simple (tmp_caps, "arm-afbc", G_TYPE_INT, 1, NULL);
+    gst_caps_append (caps, tmp_caps);
+  }
+
+  return caps;
+}
+
 static GstCaps *
 gst_wayland_sink_get_caps (GstBaseSink * bsink, GstCaps * filter)
 {
@@ -739,6 +798,8 @@ gst_wayland_sink_get_caps (GstBaseSink * bsink, GstCaps * filter)
     gst_structure_take_value (gst_caps_get_structure (caps, 1), "drm-format",
         &dmabuf_list);
 
+    caps = gst_wayland_sink_fixup_caps (self, caps);
+
     GST_DEBUG_OBJECT (self, "display caps: %" GST_PTR_FORMAT, caps);
   }
 
@@ -844,6 +905,8 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
 {
   GstWaylandSink *self = GST_WAYLAND_SINK (bsink);;
   gboolean use_dmabuf;
+  GstStructure *s;
+  gint value;
 
   GST_DEBUG_OBJECT (self, "set caps %" GST_PTR_FORMAT, caps);
 
@@ -864,6 +927,15 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
       gst_video_info_dma_drm_init (&self->drm_info);
   }
 
+  /* parse AFBC from caps */
+  s = gst_caps_get_structure (caps, 0);
+  if (gst_structure_get_int (s, "arm-afbc", &value)) {
+    if (value)
+      GST_VIDEO_INFO_SET_AFBC (&self->video_info);
+    else
+      GST_VIDEO_INFO_UNSET_AFBC (&self->video_info);
+  }
+
   self->video_info_changed = TRUE;
   self->skip_dumb_buffer_copy = FALSE;
 
@@ -879,7 +951,7 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   /* validate the format base on the memory type. */
   if (use_dmabuf) {
     if (!gst_wl_display_check_format_for_dmabuf (self->display,
-            &self->drm_info))
+            self->drm_info.drm_fourcc, self->drm_info.drm_modifier))
       goto unsupported_drm_format;
   } else if (!gst_wl_display_check_format_for_shm (self->display,
           &self->video_info)) {
@@ -925,12 +997,20 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   GstVideoInfoDmaDrm drm_info;
   GstVideoInfo vinfo;
   guint size;
+  GstStructure *s;
+  gint value;
 
   gst_query_parse_allocation (query, &caps, &need_pool);
 
   if (caps == NULL)
     return FALSE;
 
+  s = gst_caps_get_structure (caps, 0);
+  if (gst_structure_get_int (s, "arm-afbc", &value) && value) {
+    GST_DEBUG_OBJECT (bsink, "no allocation for AFBC");
+    return FALSE;
+  }
+
   if (gst_video_is_dma_drm_caps (caps)) {
     if (!gst_video_info_dma_drm_from_caps (&drm_info, caps))
       return FALSE;
@@ -959,6 +1039,7 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   alloc = gst_shm_allocator_get ();
   gst_query_add_allocation_param (query, alloc, NULL);
   gst_query_add_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL);
+  gst_query_add_allocation_meta (query, GST_VIDEO_CROP_META_API_TYPE, NULL);
   g_object_unref (alloc);
 
   return TRUE;
@@ -996,6 +1077,7 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   GstWaylandSink *self = GST_WAYLAND_SINK (vsink);
   GstBuffer *to_render;
   GstWlBuffer *wlbuffer;
+  GstVideoCropMeta *crop;
   GstMemory *mem;
   struct wl_buffer *wbuf = NULL;
 
@@ -1030,6 +1112,11 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   if (G_UNLIKELY (gst_wl_window_get_render_rectangle (self->window)->w == 0))
     goto no_window_size;
 
+  crop = gst_buffer_get_video_crop_meta (buffer);
+  if (crop)
+    gst_wl_window_ensure_crop (self->window, crop->x, crop->y,
+        crop->width, crop->height);
+
   wlbuffer = gst_buffer_get_wl_buffer (self->display, buffer);
 
   if (G_LIKELY (wlbuffer &&
@@ -1048,7 +1135,8 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
       "buffer %" GST_PTR_FORMAT " does not have a wl_buffer from our "
       "display, creating it", buffer);
 
-  if (gst_wl_display_check_format_for_dmabuf (self->display, &self->drm_info)) {
+  if (gst_wl_display_check_format_for_dmabuf (self->display,
+          self->drm_info.drm_fourcc, self->drm_info.drm_modifier)) {
     guint i, nb_dmabuf = 0;
 
     for (i = 0; i < gst_buffer_n_memory (buffer); i++)
@@ -1112,6 +1200,9 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   }
 
 handle_shm:
+  if (!wbuf && GST_VIDEO_INFO_IS_AFBC (&self->video_info))
+    goto no_afbc;
+
   if (!wbuf && gst_wl_display_check_format_for_shm (self->display,
           &self->video_info)) {
     if (gst_buffer_n_memory (buffer) == 1 && gst_is_fd_memory (mem))
@@ -1223,6 +1314,12 @@ no_wl_buffer:
     ret = GST_FLOW_ERROR;
     goto done;
   }
+no_afbc:
+  {
+    GST_ERROR_OBJECT (self, "could not import AFBC");
+    ret = GST_FLOW_ERROR;
+    goto done;
+  }
 activate_failed:
   {
     GST_ERROR_OBJECT (self, "failed to activate bufferpool.");
diff --git a/gst-libs/gst/wayland/gstwldisplay.c b/gst-libs/gst/wayland/gstwldisplay.c
index 36404de..98afccc 100644
--- a/gst-libs/gst/wayland/gstwldisplay.c
+++ b/gst-libs/gst/wayland/gstwldisplay.c
@@ -22,6 +22,8 @@
 #include <config.h>
 #endif
 
+#include <drm_fourcc.h>
+
 #include "gstwldisplay.h"
 
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
@@ -31,7 +33,6 @@
 #include "xdg-shell-client-protocol.h"
 
 #include <errno.h>
-#include <drm_fourcc.h>
 
 #define GST_CAT_DEFAULT gst_wl_display_debug
 GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
@@ -276,11 +277,9 @@ gst_wl_display_check_format_for_shm (GstWlDisplay * self,
 
 gboolean
 gst_wl_display_check_format_for_dmabuf (GstWlDisplay * self,
-    const GstVideoInfoDmaDrm * drm_info)
+    const guint fourcc, const guint64 modifier)
 {
   GstWlDisplayPrivate *priv = gst_wl_display_get_instance_private (self);
-  guint64 modifier = drm_info->drm_modifier;
-  guint fourcc = drm_info->drm_fourcc;
   GArray *formats, *modifiers;
   guint i;
 
diff --git a/gst-libs/gst/wayland/gstwldisplay.h b/gst-libs/gst/wayland/gstwldisplay.h
index 3d29b4e..a7f8c8d 100644
--- a/gst-libs/gst/wayland/gstwldisplay.h
+++ b/gst-libs/gst/wayland/gstwldisplay.h
@@ -68,7 +68,7 @@ gboolean gst_wl_display_check_format_for_shm (GstWlDisplay * self,
 
 GST_WL_API
 gboolean gst_wl_display_check_format_for_dmabuf (GstWlDisplay * self,
-    const GstVideoInfoDmaDrm *drm_info);
+    const guint fourcc, const guint64 modifier);
 
 GST_WL_API
 struct wl_display *gst_wl_display_get_display (GstWlDisplay * self);
diff --git a/gst-libs/gst/wayland/gstwllinuxdmabuf.c b/gst-libs/gst/wayland/gstwllinuxdmabuf.c
index 3f4c468..0272b27 100644
--- a/gst-libs/gst/wayland/gstwllinuxdmabuf.c
+++ b/gst-libs/gst/wayland/gstwllinuxdmabuf.c
@@ -24,8 +24,12 @@
 #include <config.h>
 #endif
 
+#include <drm_fourcc.h>
+
 #include "gstwllinuxdmabuf.h"
 
+#include <gst/video/video-info-dma.h>
+
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 
 GST_DEBUG_CATEGORY (gst_wl_dmabuf_debug);
@@ -62,16 +66,27 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
   const gint *strides = NULL;
   GstVideoMeta *vmeta;
   guint nplanes = 0, flags = 0;
+  gfloat stride_scale = 1.0f;
   struct zwp_linux_buffer_params_v1 *params;
   ConstructBufferData data;
 
   g_return_val_if_fail (gst_wl_display_check_format_for_dmabuf (display,
-          drm_info), NULL);
+          drm_info->drm_fourcc, drm_info->drm_modifier), NULL);
 
   mem = gst_buffer_peek_memory (buf, 0);
   fourcc = drm_info->drm_fourcc;
   modifier = drm_info->drm_modifier;
 
+  if (!gst_video_info_dma_drm_to_video_info (drm_info, &info)) {
+    GST_ERROR_OBJECT (display, "GstVideoMeta is needed to carry DMABuf using "
+        "'memory:DMABuf' caps feature.");
+    data.wbuf = NULL;
+    goto out;
+  }
+
+  if (GST_VIDEO_INFO_IS_AFBC (&info))
+    modifier = DRM_AFBC_MODIFIER;
+
   vmeta = gst_buffer_get_video_meta (buf);
   if (vmeta) {
     width = vmeta->width;
@@ -79,17 +94,12 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
     nplanes = vmeta->n_planes;
     offsets = vmeta->offset;
     strides = vmeta->stride;
-  } else if (gst_video_info_dma_drm_to_video_info (drm_info, &info)) {
+  } else {
     nplanes = GST_VIDEO_INFO_N_PLANES (&info);
     width = info.width;
     height = info.height;
     offsets = info.offset;
     strides = info.stride;
-  } else {
-    GST_ERROR_OBJECT (display, "GstVideoMeta is needed to carry DMABuf using "
-        "'memory:DMABuf' caps feature.");
-    data.wbuf = NULL;
-    goto out;
   }
 
   GST_DEBUG_OBJECT (display,
@@ -97,6 +107,27 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
       " (%d x %d), DRM fourcc %" GST_FOURCC_FORMAT, gst_buffer_get_size (buf),
       width, height, GST_FOURCC_ARGS (fourcc));
 
+  if (GST_VIDEO_INFO_IS_AFBC (&info)) {
+    /* Mali uses these formats instead */
+    if (fourcc == DRM_FORMAT_NV12) {
+      fourcc = DRM_FORMAT_YUV420_8BIT;
+      nplanes = 1;
+      stride_scale = 1.5;
+    } else if (fourcc == DRM_FORMAT_NV15) {
+      fourcc = DRM_FORMAT_YUV420_10BIT;
+      nplanes = 1;
+      stride_scale = 1.5;
+    } else if (fourcc == DRM_FORMAT_NV16) {
+      fourcc = DRM_FORMAT_YUYV;
+      nplanes = 1;
+      stride_scale = 2;
+    } else {
+      GST_ERROR_OBJECT (mem->allocator, "unsupported format for AFBC");
+      data.wbuf = NULL;
+      goto out;
+    }
+  }
+
   /* Creation and configuration of planes  */
   params = zwp_linux_dmabuf_v1_create_params (gst_wl_display_get_dmabuf_v1
       (display));
@@ -107,6 +138,7 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
 
     offset = offsets[i];
     stride = strides[i];
+    stride *= stride_scale;
     if (gst_buffer_find_memory (buf, offset, 1, &mem_idx, &length, &skip)) {
       GstMemory *m = gst_buffer_peek_memory (buf, mem_idx);
       gint fd = gst_dmabuf_memory_get_fd (m);
diff --git a/gst-libs/gst/wayland/gstwlvideobufferpool.c b/gst-libs/gst/wayland/gstwlvideobufferpool.c
index 3292056..5013190 100644
--- a/gst-libs/gst/wayland/gstwlvideobufferpool.c
+++ b/gst-libs/gst/wayland/gstwlvideobufferpool.c
@@ -22,10 +22,11 @@
 #include <config.h>
 #endif
 
+#include <drm_fourcc.h>
+
 #include "gstwlvideobufferpool.h"
 
 #include <gst/allocators/allocators.h>
-#include <drm_fourcc.h>
 
 GST_DEBUG_CATEGORY (gst_wl_videobufferpool_debug);
 #define GST_CAT_DEFAULT gst_wl_videobufferpool_debug
diff --git a/gst-libs/gst/wayland/gstwlvideoformat.c b/gst-libs/gst/wayland/gstwlvideoformat.c
index f58e463..3346a02 100644
--- a/gst-libs/gst/wayland/gstwlvideoformat.c
+++ b/gst-libs/gst/wayland/gstwlvideoformat.c
@@ -25,9 +25,11 @@
 #include <config.h>
 #endif
 
+#include <drm_fourcc.h>
+
 #include "gstwlvideoformat.h"
 
-#include <drm_fourcc.h>
+#include <gst/video/video-info-dma.h>
 
 /* This can be removed once we can bump the required wl_client_dep,
  * which again is blocked by a CI image update, see
@@ -82,8 +84,10 @@ static const wl_VideoFormat wl_formats[] = {
   {WL_SHM_FORMAT_UYVY, DRM_FORMAT_UYVY, GST_VIDEO_FORMAT_UYVY},
   {WL_SHM_FORMAT_AYUV, DRM_FORMAT_AYUV, GST_VIDEO_FORMAT_AYUV},
   {WL_SHM_FORMAT_NV12, DRM_FORMAT_NV12, GST_VIDEO_FORMAT_NV12},
+  {-1, DRM_FORMAT_NV15, GST_VIDEO_FORMAT_NV12_10LE40},
   {WL_SHM_FORMAT_NV21, DRM_FORMAT_NV21, GST_VIDEO_FORMAT_NV21},
   {WL_SHM_FORMAT_NV16, DRM_FORMAT_NV16, GST_VIDEO_FORMAT_NV16},
+  {-1, DRM_FORMAT_NV20, GST_VIDEO_FORMAT_NV16_10LE40},
   {WL_SHM_FORMAT_NV61, DRM_FORMAT_NV61, GST_VIDEO_FORMAT_NV61},
   {WL_SHM_FORMAT_P010, DRM_FORMAT_P010, GST_VIDEO_FORMAT_P010_10LE},
   {WL_SHM_FORMAT_NV15, DRM_FORMAT_NV15, GST_VIDEO_FORMAT_NV12_10LE40},
diff --git a/gst-libs/gst/wayland/gstwlvideoformat.h b/gst-libs/gst/wayland/gstwlvideoformat.h
index 877223b..7155e00 100644
--- a/gst-libs/gst/wayland/gstwlvideoformat.h
+++ b/gst-libs/gst/wayland/gstwlvideoformat.h
@@ -39,10 +39,12 @@ G_BEGIN_DECLS
 #if G_BYTE_ORDER == G_BIG_ENDIAN
 #define GST_WL_VIDEO_FORMATS "{ AYUV, RGBA, ARGB, BGRA, ABGR, P010_10LE, " \
     "NV12_10LE40, v308, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, " \
+    "NV12_10LE40, NV16_10LE40, " \
     "YUY2, YVYU, UYVY, I420, YV12, NV12, NV21, Y41B, YUV9, YVU9, BGR16, RGB16 }"
 #elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 #define GST_WL_VIDEO_FORMATS "{ AYUV, RGBA, ARGB, BGRA, ABGR, P010_10LE, " \
     "NV12_10LE40, v308, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, " \
+    "NV12_10LE40, NV16_10LE40, " \
     "YUY2, YVYU, UYVY, I420, YV12, NV12, NV21, Y41B, YUV9, YVU9, BGR16, RGB16 }"
 #endif
 
diff --git a/gst-libs/gst/wayland/gstwlwindow.c b/gst-libs/gst/wayland/gstwlwindow.c
index ad515af..ba17d9f 100644
--- a/gst-libs/gst/wayland/gstwlwindow.c
+++ b/gst-libs/gst/wayland/gstwlwindow.c
@@ -67,6 +67,9 @@ typedef struct _GstWlWindowPrivate
   /* the size of the video in the buffers */
   gint video_width, video_height;
 
+  gint crop_x, crop_y, crop_w, crop_h;
+  gboolean crop_dirty;
+
   gint par_n;
   gint par_d;
 
@@ -285,6 +288,29 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   return self;
 }
 
+void
+gst_wl_window_ensure_crop (GstWlWindow * self, gint x, gint y, gint w, gint h)
+{
+  GstWlWindowPrivate *priv;
+
+  if (!self)
+    return;
+
+  priv = gst_wl_window_get_instance_private (self);
+
+  if (priv->crop_x == x && priv->crop_y == y &&
+      priv->crop_w == w && priv->crop_h == h)
+    return;
+
+  priv->crop_x = x;
+  priv->crop_y = y;
+  priv->crop_w = w;
+  priv->crop_h = h;
+  priv->crop_dirty = TRUE;
+
+  GST_LOG_OBJECT (self, "crop %dx%d-%dx%d", x, y, w, h);
+}
+
 void
 gst_wl_window_ensure_fill_mode (GstWlWindow * self,
     GstWlWindowFillMode fill_mode)
@@ -557,16 +583,28 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
   gint64 video_x = 0, video_y = 0;
   gint64 video_width = priv->video_width;
   gint64 video_height = priv->video_height;
-  guint64 scaled_width =
-      gst_util_uint64_scale_int_round (video_width, priv->par_n, priv->par_d);
+  guint64 scaled_width;
   gboolean swapped = FALSE;
 
+  if (priv->crop_w && priv->crop_h) {
+    video_x = priv->crop_x;
+    video_y = priv->crop_y;
+    video_width = priv->crop_w;
+    video_height = priv->crop_h;
+  }
+  priv->crop_dirty = FALSE;
+
+  scaled_width =
+      gst_util_uint64_scale_int_round (video_width, priv->par_n, priv->par_d);
+
   /* Use scaled size for centering */
   switch (priv->buffer_transform) {
     case WL_OUTPUT_TRANSFORM_NORMAL:
     case WL_OUTPUT_TRANSFORM_180:
     case WL_OUTPUT_TRANSFORM_FLIPPED:
     case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+      src.x = video_x;
+      src.y = video_y;
       src.w = scaled_width;
       src.h = video_height;
       wp_src_width = priv->video_width;
@@ -576,6 +614,8 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
     case WL_OUTPUT_TRANSFORM_270:
     case WL_OUTPUT_TRANSFORM_FLIPPED_90:
     case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+      src.x = video_y;
+      src.y = video_x;
       src.w = video_height;
       src.h = scaled_width;
       wp_src_width = priv->video_height;
@@ -712,6 +752,8 @@ gst_wl_window_commit_buffer (GstWlWindow * self, GstWlBuffer * buffer)
     wl_subsurface_set_sync (priv->video_subsurface);
     gst_wl_window_resize_video_surface (self, FALSE);
     gst_wl_window_set_opaque (self, info);
+  } else if (priv->crop_dirty) {
+    gst_wl_window_resize_video_surface (self, FALSE);
   }
 
   if (G_LIKELY (buffer)) {
diff --git a/gst-libs/gst/wayland/gstwlwindow.h b/gst-libs/gst/wayland/gstwlwindow.h
index 432da60..bdb7306 100644
--- a/gst-libs/gst/wayland/gstwlwindow.h
+++ b/gst-libs/gst/wayland/gstwlwindow.h
@@ -49,6 +49,10 @@ struct _GstWlWindow
   GObject parent_instance;
 };
 
+GST_WL_API
+void gst_wl_window_ensure_crop (GstWlWindow * self,
+        gint x, gint y, gint w, gint h);
+
 GST_WL_API
 void gst_wl_window_ensure_fill_mode (GstWlWindow * self,
         GstWlWindowFillMode fill_mode);
-- 
2.20.1

